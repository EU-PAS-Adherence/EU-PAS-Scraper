from datetime import datetime, timezone
import logging
import re

from eupas.commands import PandasCommand
from scrapy.exceptions import UsageError


class Command(PandasCommand):

    ################################
    #     IMPORTANT FIELD NAMES    #
    ################################
    index_field = 'eu_pas_register_number'

    # NOTE: This fields are generated by the patch command
    cancel_field = '$CANCELLED_MANUAL'
    group_by_field_name = '$MATCHED'

    ################################
    #             DATE             #
    ################################
    # NOTE: A datetime is required to determine the studies with past actual dates based on the day of extraction
    compare_datetime = None
    protocol_tolerance_days = 5
    results_tolerance_days = 14 + 5

    ################################
    #  LISTS USED IN RUN FUNCTION  #
    ################################
    # NOTE: Empty percentage fields will be filled with 0
    # NOTE: funding_other_percentage will be handled seperatly (array)
    percentage_fields = ['funding_companies_percentage', 'funding_charities_percentage',
                         'funding_government_body_percentage', 'funding_research_councils_percentage',
                         'funding_eu_scheme_percentage']

    # NOTE: These fields are a subset of the analysed variables containing multiple values delimited by '; '
    category_array_fields = ['age_population', 'data_source_types', 'funded_by',
                             'other_population', 'scopes', 'sex_population', 'study_design']

    required_rmp = ['EU RMP category 1 (imposed as condition of marketing authorisation)',
                    'EU RMP category 2 (specific obligation of marketing authorisation)']

    # Used for frequency tables
    # NOTE: Arrangement will be mirrored in the final table
    frequency_fields = [
        'age_population',
        'collaboration_with_research_network',
        'funding_sources_grouped',
        'has_medical_conditions',
        'has_outcomes',
        'multiple_funding_sources',
        'number_of_countries_grouped',
        'number_of_subjects_grouped',
        'planned_duration_quartiles',
        'registration_year_grouped',
        'requested_by_regulator',
        'study_type',
        'updated_state',
        'uses_established_data_source',
        'has_protocol',
        'has_result'
    ]

    ################################
    #            OTHER             #
    ################################
    # Maximal Excel sheet name length
    max_sheet_name_length = 31

    # Dummy encoded variables use this seperator e.g updated_state__planned, updated_state__ongoing, updated_state__finalised
    variables_seperator = '__'

    # Regex to unescape variable name in patsy formula string
    formula_formatter_regex = re.compile(r'Q\("(.*?)"\).*')

    def syntax(self):
        return "[options]"

    def short_desc(self):
        return "Runs statistics with input file data."

    def add_options(self, parser):
        PandasCommand.add_options(self, parser)
        statistics = parser.add_argument_group(title="Custom Eupas Options")
        statistics.add_argument(
            "-D",
            "--date",
            metavar="COMPARE_DATE",
            default=None,
            help="specifies a date to compare against",
        )

    def process_options(self, args, opts):
        PandasCommand.process_options(self, args, opts)
        import numpy as np
        if opts.date:
            try:
                self.compare_datetime = np.datetime64(
                    opts.date, 'm'
                )
            except ValueError:
                raise UsageError(
                    'The date was not formatted correctly like e.g 2020-12-31T15:45'
                )
        else:
            self.compare_datetime = np.datetime64(
                datetime.now(timezone.utc), 'm'
            )

    def preprocess(self, df):
        '''
        Excludes cancelles studies and applies useful transformations.
        '''
        import numpy as np

        ###################################
        #    EXCLUDE CANCELLED STUDIES    #
        ###################################
        # NOTE: Pandas reads boolean columns with NA Values as float
        # NOTE: We need to fill na first because NA will be True else
        df[self.cancel_field] = df[self.cancel_field] \
            .fillna(False).astype(bool)
        self.logger.info(
            f'Excluding {df[self.cancel_field].astype(int).sum()} cancelled studies...'
        )
        df = df.loc[~df[self.cancel_field]]

        ###################################
        # SPLIT VALUES JOINED BY SPERATOR #
        ###################################
        # NOTE: These fields have multiple values delimited by '; ' and will be split into an array
        # NOTE: requested_by_regulator will be handled seperatly (uses ': ' as delimiter)
        array_fields = [
            'age_population', 'countries', 'data_sources_registered_with_encepp',
            'data_sources_not_registered_with_encepp', 'data_source_types',
            'funding_other_names', 'funding_other_percentage', 'medical_conditions',
            'other_population', 'primary_outcomes', 'references', 'scopes',
            'secondary_outcomes', 'sex_population', 'study_design', 'substance_atc',
            'substance_inn', 'other_documents_url'
        ]

        # NOTE: These fields contain a value followed by an explanation delimited by '; ' and will be split
        # NOTE: The original field will contain the first value after the split and the other values will be in another field with the suffix _details
        array_detail_split_fields = [
            'medical_conditions', 'primary_outcomes', 'secondary_outcomes'
        ]
        array_detail_split_suffix = '_details'

        self.logger.info('Splitting array string fields into arrays')
        for field in array_fields:
            df[field] = df[field].str.split('; ')

        self.logger.info(
            'Splitting details of some fields into seperate columns'
        )
        for field in array_detail_split_fields:
            values = df[field]
            df[field] = values.str[0]
            df[f'{field}{array_detail_split_suffix}'] = values.str[1]

        ###################################
        #      CONVERT YES/NO TO BOOL     #
        ###################################
        # NOTE: These fields are binary: Yes, No (Not applicable/no follow-up) and will
        yes_eq_true_fields = ['collaboration_with_research_network', 'follow_up', 'medical_conditions',
                              'primary_outcomes', 'secondary_outcomes', 'uses_established_data_source']

        self.logger.info('Converting strings to bools')
        for field in yes_eq_true_fields:
            df[field] = np.where(df[field] == 'Yes', True, False)

        self.logger.info("Transforming 'requested_by_regulator'")
        req_by_reg = df['requested_by_regulator'].str.split(': ')
        df['requested_by_regulator'] = req_by_reg.str[0]
        df['requested_by_regulator_details'] = \
            req_by_reg.str[1].str.split(', ')

        df.loc[df['requested_by_regulator'] ==
               'Yes', 'requested_by_regulator'] = True
        df.loc[df['requested_by_regulator'] ==
               'No', 'requested_by_regulator'] = False
        df.loc[df['requested_by_regulator'] ==
               "Don't know", 'requested_by_regulator'] = self.pd.NA

        ###################################
        #        FILL EMPTY VALUES        #
        ###################################
        self.logger.info(
            'Filling empty cells in percentage columns with default value 0.0'
        )
        for field in self.percentage_fields:
            df[field] = df[field].fillna(0.0)

        df['funding_other_percentage'] = df['funding_other_percentage'].apply(
            lambda x: list(map(float, x)) if isinstance(x, list) else [0.0])

        ###################################
        #        REINDEX AND SORT         #
        ###################################
        df = df.set_index(self.index_field).sort_index(axis='columns')

        return df

    def create_variables(self, df):
        '''
        Creates mostly categorical variables from preprocessed Dataframe.
        '''
        import numpy as np

        # HELPER MAPS AND FUNCTIONS

        age_map = {
            'Preterm newborns': '<18 years',
            'Term newborns (0-27 days)': '<18 years',
            'Infants and toddlers (28 days - 23 months)': '<18 years',
            'Children (2 - 11 years)': '<18 years',
            'Adolescents (12 - 17 years)': '<18 years',
            'Adults (18 - 44 years)': '18+ years',
            'Adults (45 - 64 years)': '18+ years',
            'Adults (65 - 74 years)': '18+ years',
            'Adults (75 years and over)': '18+ years'
        }

        scope_list = [
            'Risk assessment',
            'Effectiveness evaluation',
            'Drug utilisation study',
            'Disease epidemiology'
        ]

        data_source_list = [
            'Prospective patient-based data collection',
            'Disease/case registry',
            'Prescription event monitoring',
            'Administrative database, e.g. claims database',
            'Routine primary care electronic patient registry',
            'Exposure registry',
            'Pharmacy dispensing records',
            'Case-control surveillance',
            'Spontaneous reporting'
        ]

        study_design_list = [
            'Sentinel sites',
            'Intensive monitoring schemes',
            'Prescription event monitoring',
            'Cross-sectional study',
            'Cohort study',
            'Case-control study',
            'Case-series',
            'Case-crossover',
            'Self-controlled case series',
            'Drug utilisation study',
            'Pharmacokinetic study',
            'Pharmacodynamic study',
            'Drug interaction study',
            'Randomised controlled trial',
            'Non-randomised controlled trial'
        ]

        def get_funding_sources():
            funded_by_companies = df.funding_companies_percentage > 0
            funded_by_charities = df.funding_charities_percentage > 0
            funded_by_government_bodies = df.funding_government_body_percentage > 0
            fundes_by_research_councils = df.funding_research_councils_percentage > 0
            funded_by_eu_schemes = df.funding_eu_scheme_percentage > 0
            funded_by_other = df.funding_other_percentage.str[0] > 0

            companies = np.where(funded_by_companies, 'Companies', '')
            charities = np.where(funded_by_charities, 'Charities', '')
            government_bodies = np.where(
                funded_by_government_bodies, 'Government Bodies', '')
            research_councils = np.where(
                fundes_by_research_councils, 'Research Councils', '')
            eu_schemes = np.where(funded_by_eu_schemes, 'EU Schemes', '')
            other = np.where(funded_by_other, 'Other', '')

            num_sources = sum(map(
                lambda x: x.astype(int),
                [
                    funded_by_companies, funded_by_charities, funded_by_government_bodies,
                    fundes_by_research_councils, funded_by_eu_schemes, funded_by_other
                ]
            ))
            multiple_funding_sources = np.where(num_sources > 1, True, False)
            return (list(map(
                    lambda x: x or self.pd.NA,
                    [
                        '; '.join(filter(bool, x))
                        for x in zip(companies, charities, government_bodies, research_councils, eu_schemes, other)
                    ])),
                    multiple_funding_sources)

        def get_quartiles(s):
            result = (self.pd.qcut(s, 4, labels=False, duplicates='drop') + 1) \
                .fillna(0.0).astype(int)
            return np.where(result == 0, self.pd.NA, result)

        # FUNDING VARIABLES

        funded_by, multiple_funding_sources = get_funding_sources()

        # DURATION VARIABLE

        planned_duration = df.loc[
            df['final_report_date_planed'].notna()
            & df['data_collection_date_planed'].notna(),
            ['data_collection_date_planed', 'final_report_date_planed']] \
            .diff(axis='columns').iloc[:, -1]
        # NOTE: There are some studies with negative planned_duration
        planned_duration[planned_duration <= np.timedelta64(0)] = self.pd.NA

        # COPY UNCHANGED VARIABLES

        variables = df.loc[:, [
            'state', 'risk_management_plan', 'follow_up', 'registration_date',
            'requested_by_regulator', 'collaboration_with_research_network',
            'country_type', 'medical_conditions', 'uses_established_data_source',
            'primary_outcomes', 'secondary_outcomes', 'number_of_subjects']]

        # ASSIGN OTHER VARIABLES

        variables = variables.assign(
            updated_state=df['$UPDATED_state'],
            registration_year=df['registration_date'].dt.year,
            registration_days_since_first=(df['registration_date'] -
                                           df['registration_date'].min()).apply(lambda x: x.days),
            registration_year_grouped=lambda x: x['registration_year'].apply(
                lambda y:
                '2010-2011' if y <= 2011 else
                str(y)
            ),
            study_type=df['study_type'].str.split(r'; |: ').str[0],
            number_of_countries=df['countries'].apply(len),
            number_of_countries_grouped=df['countries'].apply(
                lambda x: str(len(x)) if len(x) < 3 else '3 or more'),
            number_of_subjects_grouped=df['number_of_subjects'].apply(
                lambda x:
                '<100' if x < 100 else
                '100-<500' if x < 500 else
                '500-<1000' if x < 1000 else
                '1000-10000' if x < 10000 else
                '>10000'
            ),
            age_population=df['age_population'].apply(
                lambda ages: '; '.join(sorted(list({age_map[x] for x in ages})))),
            sex_population=df['sex_population'].apply(
                lambda x: list(reversed(sorted(x)))).str.join('; '),
            other_population=df['other_population'].apply(
                lambda x: list(sorted(x)) if isinstance(x, list) else x).str.join('; '),
            funded_by=funded_by,
            multiple_funding_sources=multiple_funding_sources,
            scopes=df['scopes'].apply(
                lambda scopes: '; '.join(sorted(list({x if x in scope_list else 'Other' for x in scopes})))),
            data_source_types=df['data_source_types'].apply(
                lambda sources: '; '.join(sorted(list({x if x in data_source_list else 'Other' for x in sources})))),
            study_design=df['study_design'].apply(
                lambda designs: '; '.join(sorted(list({x if x in study_design_list else 'Other' for x in designs})))),
            planned_duration=planned_duration,
            planned_duration_quartiles=lambda x: get_quartiles(
                x['planned_duration'])
        )

        return variables.sort_index(axis='columns')

    def create_grouped_agg(self, df):
        '''
        Groups studies by sponsors and creates aggregated statistics for each group.

        Uses categorical Variables in Dataframe as input.
        '''
        import numpy as np

        # CREATE DUMMIE COLUMNS FOR EASY AGGREGATIONS

        dummy_fields = ['state', 'risk_management_plan']
        dummies = self.pd.get_dummies(df[dummy_fields], dummy_na=True) \
            .rename(columns=self.python_name_converter)

        # ASSIGN VARIABLES FOR STATISTICS OF REPORTED DOCUMENTS

        grouped = df.assign(
            past_data_collection=lambda x:
                x['data_collection_date_actual'].notna()
                & (x['data_collection_date_actual'] <= self.compare_datetime - np.timedelta64(self.protocol_tolerance_days, 'D')),
            past_data_collection_has_protocol=lambda x:
                x['past_data_collection'] & x['has_protocol'],
            two_weeks_past_final_report=lambda x:
                x['final_report_date_actual'].notna()
                & (x['final_report_date_actual'] <= self.compare_datetime - np.timedelta64(self.results_tolerance_days, 'D')),
            two_weeks_past_final_report_has_protocol=lambda x:
                x['two_weeks_past_final_report'] & x['has_result']
        ).merge(dummies, left_index=True, right_index=True).groupby(by=self.group_by_field_name, dropna=False)

        # HELPER FUNCTIONS AND VARIABLE

        def set_sum(x: PandasCommand.pd.Series):
            return len(set(x.dropna().apply(list).sum()))

        def bool_sum(x: PandasCommand.pd.Series):
            return x.dropna().astype(float).sum()

        def setify(x: PandasCommand.pd.Series):
            return '; '.join(sorted(list(set(x.dropna().apply(list).sum()))))

        def mean_mean(x):
            return x.apply(np.mean).mean()

        dummie_agg = {
            f'number_of_studies_with_{col}': (col, bool_sum) for col in dummies
        }

        percentage_agg = {
            f'mean_{col}': (col, 'mean') for col in self.percentage_fields
        }

        # AGGREGATE STATISTICS

        grouped_agg = grouped.agg(
            number_of_countries=('countries', set_sum),
            set_of_countries=('countries', setify),
            **dummie_agg,
            **percentage_agg,
            mean_other_percentage=('funding_other_percentage', mean_mean),
            number_of_studies_with_result=('has_result', bool_sum),
            number_of_studies_with_protocol=('has_protocol', bool_sum),
            number_of_studies_with_past_data_collection=(
                'past_data_collection', bool_sum),
            number_of_studies_with_past_data_collection_and_protocol=(
                'past_data_collection_has_protocol', bool_sum),
            number_of_studies_with_two_weeks_past_final_report=(
                'two_weeks_past_final_report', bool_sum),
            number_of_studies_with_two_weeks_past_final_report_and_protocol=(
                'two_weeks_past_final_report_has_protocol', bool_sum)
        )

        sizes = grouped.size().rename('num_studies')
        grouped_agg = grouped_agg.merge(
            sizes,
            left_index=True,
            right_index=True
        )
        return grouped_agg

    def encode_variables(self, df, drop_references=True):
        '''
        Creates encoded variables for logistic regression.
        '''

        # DEFINE REFERENCE VALUES FOR VARIABLES WITH OR WITHOUT NA VALUES
        # NOTE: only used to drop references if specified

        dummy_without_na_drop_map = {
            'state': 'Finalised',
            # 'updated_state': 'Finalised',
            'study_type': 'Observational study',
            'collaboration_with_research_network': False,
            'country_type': 'National study',
            'number_of_countries_grouped': '3 or more',
            # NOTE: Combined Categories => Many categories: binary encoding?
            # 'funded_by': 'Pharmaceutical companies',
            'multiple_funding_sources': False,
            'medical_conditions': True,
            # NOTE: Combined Categories => Many categories => Less categories by grouping
            'age_population': '18+ years',
            # NOTE: Combined Categories => But only 3 possible combinations
            'sex_population': 'Male; Female',
            'number_of_subjects_grouped': '100-<500',
            'uses_established_data_source': False,
            'follow_up': False,
            # NOTE: Combined Categories => Many categories: binary encoding?
            # 'scopes': 'Risk assessment',
            'primary_outcomes': False,
            'secondary_outcomes': False,
            'registration_year_grouped': '2010-2011'
        }

        dummy_with_na_drop_map = {
            'planned_duration_quartiles': 1,
            'requested_by_regulator': False,
            'risk_management_plan': 'Not applicable',
            # NOTE: Combined Categories => Many categories: binary encoding?
            # 'other_population': str(np.nan)
        }

        # ONE-HOT ENCODE VARIABLES

        encoded = self.pd.concat([
            self.pd.get_dummies(
                df[dummy_without_na_drop_map.keys()],
                prefix_sep=self.variables_seperator,
                columns=dummy_without_na_drop_map.keys()
            ),
            self.pd.get_dummies(
                df[dummy_with_na_drop_map.keys()],
                prefix_sep=self.variables_seperator,
                columns=dummy_with_na_drop_map.keys(),
                dummy_na=True  # NOTE: This somehow renames int values to float values; For example 1 becomes 1.0
            ).rename(columns=lambda x: re.sub(r'\.0+$', '', x))  # NOTE: Quickfix for renaming; Important for reference-dropping
        ], axis='columns')

        # DROP REFERENCES IF SPECIFIED

        if drop_references:
            dummy_drop_map = {
                **dummy_without_na_drop_map,
                **dummy_with_na_drop_map
            }

            columns_to_drop = [
                col for col in encoded
                if str(dummy_drop_map[col.split(self.variables_seperator)[0]]) == col.split(self.variables_seperator)[-1]
            ]

            encoded.drop(columns=columns_to_drop, inplace=True)

        return encoded.rename(columns=self.python_name_converter)

    def run_logit(self, df, logit_map):
        '''
        Runs logistic regression with patsy formulas. Uses a {name: formula} as input and {name: logit_results} as output.
        '''
        import statsmodels.formula.api as smf
        results = {}

        logging.captureWarnings(True)
        for name, formula, info in logit_map:
            self.logger.info(
                f'Running: {info}')
            lr_result = smf.logit(formula, df).fit(
                method='newton',
                maxiter=1000,
                warn_convergence=True,
                disp=False  # NOTE: Set to true/false to enable/disable printing convergence messages
            )
            results.setdefault(name, lr_result)
        logging.captureWarnings(False)

        return results

    def build_formula_string(self, y, X, escape=True):
        '''
        Builds patsy formula string with escaped values e.g. y ~ Q("x1") + Q("x2").
        '''
        vars = X
        if escape:
            vars = [f'Q("{x}")' for x in X]
        return f'{y} ~ {" + ".join(vars)}'

    def univariate_lr(self, df, y):
        '''
        Runs univariate logistic regression with encoded Dataframe as input.
        '''
        variables = sorted({
            col.split(self.variables_seperator)[0] for col in df.columns
            if self.variables_seperator in col
        })

        logit_map = [
            (
                var,
                self.build_formula_string(
                    y, [col for col in df.columns if col.startswith(var)]
                ),
                self.build_formula_string(
                    y, [var], escape=False
                )
            )
            for var in variables
        ]

        return self.run_logit(df, logit_map)

    def multivariate_lr(self, df, y):
        '''
        Excludes multicollinear variables and runs multivariate logistic regression with encoded Dataframe as input.
        '''

        # DEFINE VARIABLES TO REMOVE LIKE FOR EXAMPLE MULTICOLLINEAR VARIABLES

        drop_fields = [
            # 'has_medical_conditions',  # NOTE: High LLR p-value (>0.25)
            # 'has_outcomes',  # NOTE: High LLR p-value (>0.25)
            # NOTE: We keep country_type instead
            'number_of_countries_grouped',
            # NOTE: This field should be single-valued (finalised) for studies with past final report date
            'state',
            # NOTE: This field can only be true if there are primary outcomes (merge the variables?)
            'secondary_outcomes',
        ]

        variables = df.columns[~df.columns.str.split(self.variables_seperator).str[
            0].isin([y, *drop_fields])].sort_values()

        logit_map = [(
            'all',
            self.build_formula_string(
                y,
                variables
            ),
            self.build_formula_string(
                y,
                variables.str.split(self.variables_seperator).str[0].unique(),
                escape=False
            )
        )]

        return self.run_logit(df, logit_map)

    def run(self, args, opts):
        '''
        Runs statistics script based on analysis plan published on OSF.

        Note that the website was migrated and values / names have changed since February 2024.

        Use ema_rwd_statistic instead for the new website.
        '''
        super().run(args, opts)

        import numpy as np
        import matplotlib.pyplot as plt
        import seaborn as sns
        from statsmodels.iolib.table import SimpleTable
        from statsmodels.stats.proportion import proportion_confint

        sns.set_theme(context="paper", style="whitegrid")
        (self.output_folder / 'plots/').mkdir(parents=True, exist_ok=True)

        self.logger = logging.getLogger()
        self.logger.info('Starting statistic script')
        self.logger.info(f'Pandas {self.pd.__version__}')
        self.logger.info('Reading input data...')
        data = self.preprocess(self.read_input())

        # Adding outcomes
        data = data.assign(
            has_protocol=data['protocol_document_url'].notna()
            | data['latest_protocol_document_url'].notna(),
            has_result=data['result_document_url'].notna()
            | data['latest_result_document_url'].notna()
        )

        self.logger.info('Generating categories...')
        variables = self.create_variables(data)
        variables = variables.merge(
            data.loc[:, [
                'data_collection_date_actual', 'final_report_date_actual',
                'has_protocol', 'has_result'
            ]],
            left_index=True,
            right_index=True
        )

        self.logger.info('Writing some preanalysis data...')
        self.write_output(data, '_statistics_preprocessed')
        self.write_output(variables, '_statistics_variables')

        # NOTE: This is the population of studies, which should have protocols available
        variables_past_data_collection = variables[
            variables['data_collection_date_actual'].notna() &
            (variables['data_collection_date_actual'] <=
             self.compare_datetime - np.timedelta64(self.protocol_tolerance_days, 'D'))
        ]

        # NOTE: This is the population of studies, which should have results available
        variables_two_weeks_past_final_report = variables[
            variables['final_report_date_actual'].notna() &
            (variables['final_report_date_actual'] <=
             self.compare_datetime - np.timedelta64(self.results_tolerance_days, 'D'))
        ]

        self.logger.info('Generating and writing part 1 of analysis...')
        for df, suffix in [
                (variables, '_all'),
                (variables_past_data_collection,
                 '_past_date_collection'),
                (variables_two_weeks_past_final_report,
                 '_two_weeks_past_final_report')]:

            with self.pd.ExcelWriter(self.output_folder / f'{self.input_path.stem}_statistics_variables_frequencies{suffix}.xlsx', engine='openpyxl') as writer:

                # Variables
                df.to_excel(
                    writer,
                    sheet_name=f'variables{suffix}'[
                        :self.max_sheet_name_length]
                )

                # Description of all numerical fields
                # min max mean var etc.
                df.describe().to_excel(
                    writer,
                    sheet_name='numerical_descriptions'
                )

                for col in sorted(df.columns):

                    def calculate_and_write_frequencies(df, col, writer, dropna=True, col_offset=0):

                        # Absolute and relative frequencies of categories
                        frequencies = self.pd.DataFrame().assign(
                            absolute=df.loc[:, [col]].apply(
                                lambda x: x.value_counts(dropna=dropna)),
                            percentage=df.loc[:, [col]].apply(
                                lambda x: x.value_counts(dropna=dropna, normalize=True) * 100)
                        ).reset_index().rename(
                            columns={
                                col: col
                            }
                        )

                        frequencies.to_excel(
                            writer,
                            sheet_name=f'{col}_frequencies'[
                                :self.max_sheet_name_length],
                            index=False,
                            startcol=col_offset
                        )

                        if col in self.category_array_fields:

                            grouped_frequencies = frequencies \
                                .assign(split=lambda x: x[col].str.split('; ')) \
                                .explode('split') \
                                .groupby('split')

                            # Absolute and relative frequencies of subcategories
                            overall_frequencies = self.pd.DataFrame().assign(
                                overall_absolute=grouped_frequencies['absolute'].sum(
                                ),
                                overall_percentage=grouped_frequencies['percentage'].sum(
                                ),
                            ).reset_index().rename(columns={'split': col})

                            overall_frequencies.to_excel(
                                writer,
                                sheet_name=f'{col}_frequencies'[
                                    :self.max_sheet_name_length],
                                index=False,
                                startcol=4 + col_offset
                            )

                    # Frequencies of categories without NA
                    calculate_and_write_frequencies(df, col, writer)
                    if df.loc[:, [col]].isna().any().loc[col]:
                        # Frequencies of categories with NA
                        calculate_and_write_frequencies(
                            df, col, writer, dropna=False,
                            col_offset=8 if col in self.category_array_fields else 4
                        )

        self.logger.info('Generating and writing part 2 of analysis...')
        for df, suffix in [
                (variables, '_all'),
                (variables_past_data_collection,
                 '_past_date_collection'),
                (variables_two_weeks_past_final_report,
                 '_two_weeks_past_final_report')]:

            with self.pd.ExcelWriter(self.output_folder / f'{self.input_path.stem}_statistics_variables_documents{suffix}.xlsx', engine='openpyxl') as writer:

                df.to_excel(
                    writer,
                    sheet_name=f'variables{suffix}'[
                        :self.max_sheet_name_length]
                )

                for col in ['has_protocol', 'has_result']:

                    def get_frequencies_with_ci(df, alpha=0.05):
                        return df.apply(lambda x: x.value_counts()) \
                            .rename(columns={col: 'absolute'}) \
                            .assign(
                                percentage=df.apply(
                                    lambda x: x.value_counts(normalize=True) * 100),
                                confidence_interval=lambda x: x['absolute'].apply(
                                    lambda y: [z * 100 for z in proportion_confint(y, len(df), alpha=alpha, method='beta')])
                        ).reset_index()

                    # Absolute and relative frequencies (with 95%-CI) of categories with protocols or results
                    frequencies = get_frequencies_with_ci(df.loc[:, [col]])

                    frequencies.to_excel(
                        writer,
                        sheet_name=col[:self.max_sheet_name_length],
                        index=False
                    )

                    # Same metrics for the subset of studies required by RMP
                    required_rmp_frequencies = get_frequencies_with_ci(
                        df.loc[df['risk_management_plan'].isin(
                            self.required_rmp), [col]]
                    ).rename(columns={col: f'required_{col}'})

                    required_rmp_frequencies.to_excel(
                        writer,
                        sheet_name=col[:self.max_sheet_name_length],
                        index=False,
                        startrow=4
                    )

        self.logger.info('Generating and writing part 3 of analysis...')
        data_to_group = variables.merge(
            data.loc[:, [self.group_by_field_name, *self.percentage_fields,
                         'funding_other_percentage', 'countries']],
            left_index=True,
            right_index=True
        )
        grouped_agg = self.create_grouped_agg(data_to_group)
        self.write_output(grouped_agg, '_statistics_funding_all')

        logit_data = []
        for df, y_label, name in [
                (variables_past_data_collection, 'has_protocol', 'protocol'),
                (variables_two_weeks_past_final_report, 'has_result', 'results')]:

            self.logger.info(
                f'Starting logistic regression for {y_label}...')

            self.logger.info(
                'Generating and writing encoded variables for logistic regression...')
            encoded = self.encode_variables(df)
            y = df.loc[:, [y_label]].astype(int)
            encoded_y = encoded.merge(
                y,
                left_index=True,
                right_index=True,
                how='right'
            )
            self.write_output(
                encoded_y, f'_statistics_encoded_variables_{name}')

            self.logger.info(
                'Generating and writing correlations for logistic regression...')
            correlations = self.encode_variables(
                df,
                drop_references=False
            ).merge(
                y,
                left_index=True,
                right_index=True,
                how='right'
            ).corr(method='pearson')
            self.write_output(
                correlations, f'_statistics_encoded_variables_correlations_for_{name}_model')

            fig, ax = plt.subplots(figsize=(20, 15), dpi=300)
            ax.set_title('Correlations (Pearson)')
            mask = np.triu(np.ones_like(correlations, dtype=bool))
            sns.heatmap(correlations, mask=mask, cmap='RdBu', vmax=.3, center=0,
                        square=True, linewidths=.5, cbar_kws={"shrink": .5}, ax=ax)
            fig.savefig(self.output_folder / 'plots' /
                        f'correlation_heatmap_for_{name}_model.png', bbox_inches='tight')

            def save_model_results(results, folder_name, subfolder_name):
                (self.output_folder / folder_name / 'models' /
                 subfolder_name).mkdir(parents=True, exist_ok=True)
                (self.output_folder / folder_name / 'summaries' /
                 subfolder_name).mkdir(parents=True, exist_ok=True)

                summaries = {}

                for name, model_result in results.items():
                    model_result.save(
                        self.output_folder / folder_name / 'models' / subfolder_name / f'{name}.pickle')

                    ci_odds_ratio = np.exp(model_result.conf_int()) \
                        .rename(columns={0: '[0.025', 1: '0.975]'})
                    odds_ratio = np.exp(model_result.params) \
                        .rename('odds rt').to_frame()
                    odds_ratio_data = np.round(
                        self.pd.merge(
                            odds_ratio,
                            ci_odds_ratio,
                            left_index=True,
                            right_index=True
                        ),
                        decimals=4
                    )

                    table = SimpleTable(
                        odds_ratio_data.values, odds_ratio_data.columns.to_list()
                    )
                    summary = model_result.summary()
                    summary.tables[1].extend_right(table)

                    summary_df = self.pd.DataFrame(
                        summary.tables[1].data[1:],
                        columns=['name'] + summary.tables[1].data[0][1:]
                    )
                    summary_df = summary_df.set_index(summary_df.columns[0])
                    summaries.setdefault(
                        name,
                        summary_df
                    )

                    (self.output_folder / folder_name /
                     'summaries' / subfolder_name / f'{name}.txt') \
                        .write_text(summary.as_text())

                    (self.output_folder / folder_name /
                     'summaries' / subfolder_name / f'{name}.html') \
                        .write_text(summary.as_html())

                    (self.output_folder / folder_name /
                     'summaries' / subfolder_name / f'{name}.csv') \
                        .write_text(summary.as_csv())

                return summaries

            self.logger.info(
                'Running univariate logistic regression and writing output...')
            results = self.univariate_lr(encoded_y, y_label)
            univariate_summaries = save_model_results(
                results,
                'univariate_models',
                name
            )

            self.logger.info(
                'Running multivariate logistic regression and writing output...')
            results = self.multivariate_lr(encoded_y, y_label)
            multivariate_summaries = save_model_results(
                results,
                'multivariate_models',
                name
            )

            logit_data.append(
                dict(univariate_summaries, **multivariate_summaries)
            )

        self.logger.info('Generating and writing extra tables...')
        with self.pd.ExcelWriter(self.output_folder / f'{self.input_path.stem}_statistics_tables_frequencies.xlsx', engine='openpyxl') as writer:

            for df, suffix in [
                    (variables, '_all'),
                    (variables_past_data_collection,
                        '_past_date_collection'),
                    (variables_two_weeks_past_final_report,
                        '_two_weeks_past_final_report')]:

                # df.to_excel(
                #     writer,
                #     sheet_name=f'variables{suffix}'[
                #         :self.max_sheet_name_length]
                # )

                # Create Frequency table of variables for each rmp category
                rmp = df['risk_management_plan'].fillna('Not specified')
                result = self.pd.DataFrame()

                for col in self.frequency_fields:

                    # Absolute Frequencies
                    absolute = self.pd.crosstab(
                        df[col].fillna(str(np.nan)),
                        rmp,
                        rownames=['value'],
                        margins=True,
                        margins_name='All',
                    )

                    # Absolute Frequencies (This will drop the 'All' row automatically)
                    relative = self.pd.crosstab(
                        df[col].fillna(str(np.nan)),
                        rmp,
                        rownames=['value'],
                        margins=True,
                        margins_name='All',
                        normalize='columns'
                    )

                    combined = absolute[:-1].astype(str) + ' (' + (
                        relative * 100).round(2).astype(str) + ')'

                    result = self.pd.concat([
                        result,
                        combined.assign(variable=col)
                    ])

                result = result \
                    .reset_index() \
                    .set_index(['variable', 'value'])

                result.columns = result.columns.str.replace(
                    r'\s\(.+\)', '', regex=True) + ' (' + absolute.iloc[-1].astype(str).values + ')'

                result.to_excel(
                    writer,
                    sheet_name=f'table{suffix}'[
                        :self.max_sheet_name_length]
                )

        with self.pd.ExcelWriter(self.output_folder / f'{self.input_path.stem}_statistics_tables_logit.xlsx', engine='openpyxl') as writer:

            for df, suffix, logit in zip(
                (variables_past_data_collection,
                    variables_two_weeks_past_final_report),
                ('_past_date_collection',
                    '_two_weeks_past_final_report'),
                logit_data
            ):

                def transform_logit_table(df):
                    df = df.drop('Intercept').reset_index()

                    df['name'] = df['name'].str.replace(
                        self.formula_formatter_regex, r'\1',
                        regex=True
                    )

                    df = df.assign(
                        variable=df['name'].str.split(
                            self.variables_seperator).str[0],
                        value=df['name'].str.split(
                            self.variables_seperator).str[1]
                    )

                    df = self.pd.concat([
                        df.iloc[:, :5],
                        df.iloc[:, 7:]
                    ],
                        axis='columns'
                    )

                    df['odds rt'] = df['odds rt'].round(2).astype(str) + ' (' + \
                        df['[0.025'].round(2).astype(str) + ' - ' + \
                        df['0.975]'].round(2).astype(str) + ')'

                    df = df.drop(
                        [
                            'coef', 'std err',
                            'z', '[0.025', '0.975]'
                        ],
                        axis='columns'
                    )

                    df = df.rename(columns={
                        'P>|z|': 'P value',
                        'odds rt': 'OR (95% CI)'
                    })

                    return df

                # df.to_excel(
                #     writer,
                #     sheet_name=f'variables{suffix}'[
                #         :self.max_sheet_name_length]
                # )

                multivariate = transform_logit_table(logit['all'])

                univariate = self.pd.DataFrame()
                frequencies = self.pd.DataFrame()
                for var, logit_df in logit.items():
                    if var != 'all':

                        univariate = self.pd.concat([
                            univariate,
                            transform_logit_table(logit_df)
                        ])

                        frequencies = self.pd.concat([
                            frequencies,
                            self.pd.merge(
                                df[var].fillna(str(np.nan))
                                .value_counts()
                                .rename('absolute').to_frame(),
                                df[var].fillna(str(np.nan))
                                .value_counts(normalize=True)
                                .rename('relative').to_frame(),
                                left_index=True,
                                right_index=True,
                            ).assign(variable=var)
                            .reset_index()
                            .rename(
                                columns={
                                    var: 'value'
                                }
                            )
                        ])

                frequencies = frequencies.assign(
                    **{
                        'n (%)': lambda x: x['absolute'].astype(str) + ' ('
                        + (x['relative'] * 100).round(2).astype(str) + ')'
                    },
                    name=lambda x: x['variable'].astype(str) + '__'
                    + x['value'].astype(str).map(self.python_name_converter)
                ).drop(['absolute', 'relative'], axis='columns')

                result = self.pd.merge(
                    univariate,
                    multivariate,
                    on='name',
                    how='left',
                    suffixes=(' univariate', ' multivariate')
                )

                print(result.name.values, frequencies.name.values)

                result = self.pd.merge(
                    frequencies,
                    result,
                    on='name',
                    how='left'
                ).drop(
                    ['name', 'variable univariate', 'value univariate',
                        'variable multivariate', 'value multivariate'],
                    axis='columns'
                ).set_index(['variable', 'value']).sort_index()

                result.to_excel(
                    writer,
                    sheet_name=f'table{suffix}'[
                        :self.max_sheet_name_length]
                )

        self.logger.info('Generating and writing extra plots...')

        plt.figure(dpi=300)
        date = data['registration_date'].dt.to_period('M')
        self.pd.concat(
            [
                data.groupby(date).size().rename('studies'),
                data.groupby(date).size().cumsum().rename('cumulated studies')
            ], axis='columns') \
            .plot(
                title='Frequency of studies by "Registration Date"',
                xlabel='Registration Date',
                ylabel='# of studies',
                subplots=True
        )
        plt.savefig(self.output_folder / 'plots' /
                    'registration_date_count_freq.png')

        plt.figure(dpi=300)
        variables.groupby(date)[['has_protocol', 'has_result']].sum().plot(
            title='Frequency of studies with protocol or results by "Registration Date"',
            xlabel='Registration Date',
            ylabel='# of studies',
            subplots=True
        )
        plt.savefig(self.output_folder / 'plots' /
                    'registration_date_protocol_results_freq.png')
